<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.scoula.mypage.portfolio.mapper.PortfolioMapper">

    <select id="getPortfolioItems" resultType="org.scoula.mypage.portfolio.dto.PortfolioItemResponse">
        SELECT p.portfolio_id AS portfolioId,
               fp.product_name AS productName,
               pc.name AS categoryName,
               ps.name AS subcategoryName,
               p.amount,
               DATE_FORMAT(p.join_date, '%Y-%m-%d') AS joinDate,
               p.memo,

               -- üéØ Ïó¨Í∏∞Î∂ÄÌÑ∞ Ï∂îÍ∞Ä
               p.custom_rate AS customRate,
               do.save_trm AS saveTerm

        FROM portfolio_item p
                 JOIN financial_product fp ON p.product_id = fp.product_id
                 JOIN product_category pc ON p.category_id = pc.category_id
                 JOIN product_subcategory ps ON p.subcategory_id = ps.subcategory_id

            -- üéØ ÏÉÅÌíà ÏòµÏÖò Ï°∞Ïù∏ (ÏòàÏ†ÅÍ∏à Í∏∞Ï§Ä)
                 LEFT JOIN deposit_option do ON do.product_id = p.product_id
                    AND do.save_trm = p.save_trm

        WHERE p.member_id = #{memberId}
        ORDER BY p.created_at DESC
    </select>

    <insert id="insertPortfolioItem">
        INSERT INTO portfolio_item (member_id, product_id, category_id, subcategory_id, amount, join_date, memo, custom_rate, save_trm)
        VALUES (#{memberId}, #{dto.productId}, #{dto.categoryId}, #{dto.subcategoryId}, #{dto.amount}, #{dto.joinDate}, #{dto.memo}, #{dto.customRate}, #{dto.saveTrm})
    </insert>

    <select id="findCategoryIdByProductId" resultType="long">
        SELECT category_id
        FROM financial_product
        WHERE product_id = #{productId}
    </select>

    <select id="findSubcategoryIdByProductId" resultType="long">
        SELECT subcategory_id
        FROM financial_product
        WHERE product_id = #{productId}
    </select>

    <update id="updatePortfolioItem">
        UPDATE portfolio_item
        SET amount = #{dto.amount},
            memo = #{dto.memo},
            updated_at = NOW()
        WHERE portfolio_id = #{portfolioId}
    </update>

    <delete id="deletePortfolioItem">
        DELETE FROM portfolio_item
        WHERE portfolio_id = #{portfolioId}
    </delete>

    <select id="findOptionIdByProductIdAndTerm" resultType="long">
        SELECT option_id
        FROM deposit_option
        WHERE product_id = #{productId}
          AND save_trm = #{saveTerm}
        LIMIT 1
    </select>

    <select id="getPortfolioSummary" resultType="map">
        SELECT
            pc.name AS categoryName,
            psc.name AS subcategoryName,
            SUM(p.amount) AS totalAmount
        FROM portfolio_item p
                 JOIN product_category pc ON p.category_id = pc.category_id
                 JOIN product_subcategory psc ON p.subcategory_id = psc.subcategory_id  -- ‚úÖ ÏàòÏ†ï!
        WHERE p.member_id = #{memberId}
        GROUP BY pc.name, psc.name
    </select>

    <!-- ÏÇ¨Ïö©ÏûêÏùò ÎÇòÏù¥ Ï°∞Ìöå -->
    <select id="getAgeByMemberId" resultType="int">
        SELECT TIMESTAMPDIFF(YEAR, birth_date, CURDATE()) as age
        FROM member
        WHERE member_id = #{memberId}
    </select>

    <!-- ÏÇ¨Ïö©ÏûêÏùò Ï¥ù ÏûêÏÇ∞ Ï°∞Ìöå -->
    <select id="getTotalAssetsByMemberId" resultType="long">
        SELECT COALESCE(SUM(amount), 0) as totalAssets
        FROM portfolio_item
        WHERE member_id = #{memberId}
    </select>

    <!-- ÏÇ¨Ïö©ÏûêÏùò WMTI ÏΩîÎìú Ï°∞Ìöå -->
    <select id="getWmtiCodeByMemberId" resultType="string">
        SELECT wmti_code
        FROM wmti_profile
        WHERE member_id = #{memberId}
    </select>

    <!-- Í∞ôÏùÄ ÎÇòÏù¥ÎåÄ ÏÇ¨Ïö©ÏûêÎì§Ïùò ÏÑúÎ∏åÏπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÌèâÍ∑† ÎπÑÏú® -->
    <select id="getAgeGroupComparison" resultType="map">
        WITH age_group_portfolio AS (
            SELECT
                pi.member_id,
                psc.name as categoryName,  -- ÏÑúÎ∏åÏπ¥ÌÖåÍ≥†Î¶¨Î™ÖÏùÑ categoryNameÏúºÎ°ú
                SUM(pi.amount) as categoryAmount,
                (SELECT SUM(amount) FROM portfolio_item pi2 WHERE pi2.member_id = pi.member_id) as totalAmount
            FROM portfolio_item pi
                     JOIN product_subcategory psc ON pi.subcategory_id = psc.subcategory_id
                     JOIN member m ON pi.member_id = m.member_id
            WHERE TIMESTAMPDIFF(YEAR, m.birth_date, CURDATE()) BETWEEN #{ageMin} AND #{ageMax}
              AND pi.member_id != #{memberId}
              AND m.status = 'ACTIVE'
            GROUP BY pi.member_id, psc.subcategory_id, psc.name
        )
        SELECT
            categoryName,
            ROUND(AVG(categoryAmount * 100.0 / totalAmount), 1) as averageRatio
        FROM age_group_portfolio
        WHERE totalAmount > 0
        GROUP BY categoryName
        HAVING COUNT(DISTINCT member_id) >= 1
        ORDER BY averageRatio DESC
    </select>

    <!-- Í∞ôÏùÄ ÏûêÏÇ∞ Í∑úÎ™® ÏÇ¨Ïö©ÏûêÎì§Ïùò ÏÑúÎ∏åÏπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÌèâÍ∑† ÎπÑÏú® -->
    <select id="getAmountGroupComparison" resultType="map">
        WITH user_assets AS (
            SELECT member_id, SUM(amount) as totalAssets
            FROM portfolio_item
            GROUP BY member_id
        ),
             amount_group_portfolio AS (
                 SELECT
                     pi.member_id,
                     psc.name as categoryName,  -- ÏÑúÎ∏åÏπ¥ÌÖåÍ≥†Î¶¨Î™ÖÏùÑ categoryNameÏúºÎ°ú
                     SUM(pi.amount) as categoryAmount,
                     ua.totalAssets
                 FROM portfolio_item pi
                          JOIN product_subcategory psc ON pi.subcategory_id = psc.subcategory_id
                          JOIN user_assets ua ON pi.member_id = ua.member_id
                 WHERE ua.totalAssets BETWEEN #{amountMin} AND #{amountMax}
                   AND pi.member_id != #{memberId}
                 GROUP BY pi.member_id, psc.subcategory_id, psc.name, ua.totalAssets
             )
        SELECT
            categoryName,
            ROUND(AVG(categoryAmount * 100.0 / totalAssets), 1) as averageRatio
        FROM amount_group_portfolio
        GROUP BY categoryName
        HAVING COUNT(DISTINCT member_id) >= 1
        ORDER BY averageRatio DESC
    </select>

    <!-- Í∞ôÏùÄ WMTI ÏÇ¨Ïö©ÏûêÎì§Ïùò ÏÑúÎ∏åÏπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÌèâÍ∑† ÎπÑÏú® -->
    <select id="getWMTIComparison" resultType="map">
        WITH wmti_portfolio AS (
            SELECT
                pi.member_id,
                psc.name as categoryName,  -- ÏÑúÎ∏åÏπ¥ÌÖåÍ≥†Î¶¨Î™ÖÏùÑ categoryNameÏúºÎ°ú
                SUM(pi.amount) as categoryAmount,
                (SELECT SUM(amount) FROM portfolio_item pi2 WHERE pi2.member_id = pi.member_id) as totalAmount
            FROM portfolio_item pi
                     JOIN product_subcategory psc ON pi.subcategory_id = psc.subcategory_id
                     JOIN wmti_profile wp ON pi.member_id = wp.member_id
            WHERE wp.wmti_code = #{wmtiCode}
              AND pi.member_id != #{memberId}
            GROUP BY pi.member_id, psc.subcategory_id, psc.name
        )
        SELECT
            categoryName,
            ROUND(AVG(categoryAmount * 100.0 / totalAmount), 1) as averageRatio
        FROM wmti_portfolio
        WHERE totalAmount > 0
        GROUP BY categoryName
        HAVING COUNT(DISTINCT member_id) >= 1
        ORDER BY averageRatio DESC
    </select>
    <select id="getPortfolioMemberCountByAgeGroup" resultType="java.util.Map">
        SELECT
            FLOOR(TIMESTAMPDIFF(YEAR, m.birth_date, CURDATE()) / 10) * 10 AS age_group,
            COUNT(DISTINCT m.member_id) AS user_count
        FROM portfolio_item p
                 JOIN member m ON p.member_id = m.member_id
        GROUP BY age_group
        ORDER BY age_group;


    </select>

    <!-- Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏ -->
    <select id="existsById" parameterType="Long" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM portfolio_item
        WHERE portfolio_id = #{portfolioId}
    </select>

    <!-- Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÏÜåÏú†Í∂å ÌôïÏù∏ -->
    <select id="isOwner" parameterType="map" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM portfolio_item
        WHERE portfolio_id = #{portfolioId}
          AND member_id = #{memberId}
    </select>
</mapper>
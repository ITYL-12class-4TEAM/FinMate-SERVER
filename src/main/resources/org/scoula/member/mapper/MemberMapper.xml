<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.scoula.member.mapper.MemberMapper">

    <!-- 권한 정보 맵핑 -->
    <resultMap id="authMap" type="AuthVO">
        <result property="email" column="email"/>
        <result property="auth" column="auth"/>
    </resultMap>

    <!-- 멤버 정보 맵핑 -->
    <resultMap id="memberMap" type="MemberVO">
        <id property="memberId" column="member_id"/>
        <result property="profileImage" column="profile_image"/>
        <result property="username" column="username"/>
        <result property="level" column="level"/>
        <result property="mainBadgeId" column="main_badge_id"/>
        <result property="nickname" column="nickname"/>
        <result property="email" column="email"/>
        <result property="phoneNumber" column="phone_number"/>
        <result property="password" column="password"/>
        <result property="birthDate" column="birth_date"/>
        <result property="gender" column="gender"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="role" column="role"/>
        <result property="socialType" column="social_type"/>
        <result property="socialId" column="social_id"/>
        <result property="accessToken" column="access_token"/>
        <result property="refreshToken" column="refresh_token"/>
        <result property="receivePushNotification" column="receive_push_notification"/>
        <result property="status" column="status"/>
        <result property="isNewMember" column="is_new_member"/>
    </resultMap>

    <select id="selectByEmail" resultType="org.scoula.security.account.domain.MemberVO">
        SELECT * FROM member WHERE email = #{email}
    </select>
    <select id="selectByNickname" resultType="org.scoula.security.account.domain.MemberVO">
        SELECT * FROM member WHERE nickname = #{nickname}
    </select>
    <!-- 토큰  -->
    <update id="updateTokens">
        UPDATE member
        SET refresh_token = #{refreshToken},
            updated_at = NOW()
        WHERE email = #{username}
    </update>
    <update id="clearRefreshToken">
        UPDATE member
        SET refresh_token = NULL,
            updated_at = NOW()
        WHERE email = #{username}
    </update>

    <select id="findIdByUsername" resultType="long">
        SELECT member_id FROM member WHERE email = #{username}
    </select>

    <insert id="insert" parameterType="org.scoula.security.account.domain.MemberVO">
        INSERT INTO member (username, password, nickname, email, phone_number, birth_date, gender, receive_push_notification)
        VALUES (#{username}, #{password}, #{nickname}, #{email}, #{phoneNumber}, #{birthDate}, #{gender}, #{receivePushNotification})
    </insert>

    <!-- MemberMapper.xml -->
    <select id="getRefreshToken" resultType="string">
        SELECT refresh_token
        FROM member
        WHERE member.member_id = #{memberId}
    </select>

    <select id="findUsernameByNameAndPhone" resultType="string">
        SELECT email
        FROM member
        WHERE username = #{username}
          AND phone_number = #{phoneNumber}
    </select>

    <update id="updatePassword">
        UPDATE member
        SET password = #{Password},
            updated_at = NOW()
        WHERE member_id = #{memberId}
    </update>

    <update id="updateProfile">
        UPDATE member
        SET nickname = #{nickname},
            receive_push_notification = #{receivePushNotification}
        WHERE member_id = #{memberId}
    </update>
    <select id="getMemberIdByEmail" resultType="long">
        SELECT member_id FROM member WHERE email = #{email}
    </select>
    <update id="updateProfileImage">
        UPDATE member
        SET profile_image = #{profileImage}
        WHERE member_id = #{memberId}
    </update>

    <delete id="deleteMember">
        DELETE FROM member WHERE member_id = #{memberId}
    </delete>

    <!-- 소셜 로그인 관련 쿼리들 -->
    <select id="findByEmail" resultMap="memberMap">
        SELECT * FROM member WHERE email = #{email} AND status = 'ACTIVE'
    </select>

    <select id="findBySocialTypeAndSocialId" resultMap="memberMap">
        SELECT * FROM member
        WHERE social_type = #{socialType}
        AND social_id = #{socialId}
        AND status = 'ACTIVE'
    </select>

    <!-- 소셜 회원 최초 등록 -->
    <insert id="insertSocialMember" parameterType="org.scoula.security.account.domain.MemberVO" useGeneratedKeys="true" keyProperty="memberId">
        INSERT INTO member (
            profile_image, username, level, nickname, email,
            role, social_type, social_id, status, is_new_member, created_at
        ) VALUES (
            #{profileImage}, #{username}, #{level}, #{nickname}, #{email},
            #{role}, #{socialType}, #{socialId}, #{status}, #{isNewMember}, #{createdAt}
        )
    </insert>

    <!-- 소셜 회원 정보 업데이트 -->
    <update id="updateSocialMember" parameterType="org.scoula.security.account.domain.MemberVO">
        UPDATE member
        SET profile_image = #{profileImage},
            nickname = #{nickname},
            social_id = #{socialId},
            is_new_member = #{isNewMember},
            updated_at = #{updatedAt}
        WHERE member_id = #{memberId}
    </update>

    <!-- 소셜 회원가입 완료 -->
    <update id="completeSocialSignup" parameterType="org.scoula.security.account.domain.MemberVO">
        UPDATE member
        SET nickname = #{nickname},
            phone_number = #{phoneNumber},
            birth_date = #{birthDate},
            gender = #{gender},
            receive_push_notification = #{receivePushNotification},
            is_new_member = false,
            updated_at = #{updatedAt}
        WHERE member_id = #{memberId}
    </update>

</mapper>
